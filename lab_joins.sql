# Challenge - Joining on multiple tables
# Write SQL queries to perform the following tasks using the Sakila database:
USE sakila;

# 1. List the number of films per category.
SELECT 
	fc.category_id, 
    COUNT(fc.category_id) AS n_of_category,
    c.name
FROM film_category AS fc
INNER JOIN category AS c
ON fc.category_id = c.category_id
GROUP BY category_id
ORDER BY n_of_category DESC;

# 2. Retrieve the store ID, city, and country for each store.
SELECT 
		s.store_id,
		s.address_id,
        a.city_id,
        c.city,
        c.country_id,
        y.country
FROM store AS s
INNER JOIN address AS a ON s.address_id = a.address_id
INNER JOIN city AS c ON a.city_id = c.city_id
INNER JOIN country AS y ON c.country_id = y.country_id;

# 3. Calculate the total revenue generated by each store in dollars.
SELECT 
		s.store_id,
        ROUND(SUM(p.amount), 2) AS revenue
FROM store AS s
INNER JOIN staff AS st ON s.store_id = st.store_id
INNER JOIN payment AS p ON st.staff_id = p.staff_id
GROUP BY s.store_id;

# 4. Determine the average running time of films for each category.
SELECT 
		c.category_id,
        c.name AS category_name,
        ROUND(AVG(f.length), 2) AS avg_length
FROM film AS f
INNER JOIN film_category AS fc ON f.film_id = fc.film_id
INNER JOIN category AS c ON fc.category_id = c.category_id
GROUP BY c.category_id, c.name
ORDER BY avg_length DESC;

## Bonus:
# 5. Identify the film categories with the longest average running time.
SELECT 
		c.category_id,
        c.name AS category_name,
        ROUND(AVG(f.length), 2) AS avg_length
FROM film AS f
INNER JOIN film_category AS fc ON f.film_id = fc.film_id
INNER JOIN category AS c ON fc.category_id = c.category_id
GROUP BY c.category_id, c.name
ORDER BY avg_length DESC
LIMIT 5;

# 6. Display the top 10 most frequently rented movies in descending order.
SELECT 
    f.film_id,
    f.title,
    COUNT(r.inventory_id) AS most_freq
FROM inventory AS i
INNER JOIN film AS f ON i.film_id = f.film_id
INNER JOIN rental AS r ON i.inventory_id = r.inventory_id
GROUP BY f.film_id, f.title
ORDER BY most_freq DESC
LIMIT 10;

# 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT 
		i.store_id,
        f. film_id,
        f.title
FROM film AS f
INNER JOIN inventory AS i ON f.film_id = i.film_id
WHERE title LIKE "Academy Dinosaur";

SELECT * FROM rental; -- rental_id
SELECT * FROM store;  -- store_id
SELECT * FROM inventory; -- inventory_id, film_id, store_id

# 8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
# Include a column indicating whether each title is 'Available' or 'NOT available.' 
# Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

SELECT 
    f.title,
    f.film_id,
    i.inventory_id,
    CASE 
        WHEN COUNT(i.inventory_id) = 0 THEN 'NOT available'
        ELSE 'Available'
    END AS availability_status
FROM film AS f
LEFT JOIN inventory AS i ON f.film_id = i.film_id
GROUP BY f.film_id, f.title, i.inventory_id
ORDER BY f.title;

# Here are some tips to help you successfully complete the lab:

# Tip 1: This lab involves joins with multiple tables, which can be challenging. Take your time and follow the steps we discussed in class:
# Make sure you understand the relationships between the tables in the database. This will help you determine which tables to join and which columns to use in your joins.
# Identify a common column for both tables to use in the ON section of the join. If there isn't a common column, you may need to add another table with a common column.
# Decide which table you want to use as the left table (immediately after FROM) and which will be the right table (immediately after JOIN).
# Determine which table you want to include all records from. This will help you decide which type of JOIN to use. 
# If you want all records from the first table, use a LEFT JOIN. If you want all records from the second table, use a RIGHT JOIN. 
# If you want records from both tables only where there is a match, use an INNER JOIN.
# Use table aliases to make your queries easier to read and understand. This is especially important when working with multiple tables.
# Write the query

# Tip 2: Break down the problem into smaller, more manageable parts. For example, you might start by writing a query 
# to retrieve data from just two tables before adding additional tables to the join. Test your queries as you go, and check the output carefully 
# to make sure it matches what you expect. This process takes time, so be patient and go step by step to build your query incrementally.